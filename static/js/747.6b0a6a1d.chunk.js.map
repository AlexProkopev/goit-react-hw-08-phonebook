{"version":3,"file":"static/js/747.6b0a6a1d.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/Phonebook/Phonebook.module.css?3a02","../node_modules/nanoid/index.browser.js","components/Phonebook/Phonebook.jsx","../node_modules/reselect/es/defaultMemoize.js","../node_modules/reselect/es/index.js","redux/selectors.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"Phonebook_form__J23fu\",\"label\":\"Phonebook_label__Qzztg\",\"input\":\"Phonebook_input__8yiEQ\",\"submitBtn\":\"Phonebook_submitBtn__LiL5T\"};","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import css from './Phonebook.module.css';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { nanoid } from 'nanoid';\nimport { selectcontatcs } from 'redux/selectors';\nimport { addContactThunk, fetchContactsList } from 'redux/services';\n\nconst Phonebook = () => {\n  const contactsRed = useSelector(selectcontatcs);\n\n  const dispatch = useDispatch();\n\n  const handleAddContact = async contacts => {\n    \n    const hasDuplicatesName = contactsRed.some(\n      ({ name }) => name.toLowerCase() === contacts.name.toLowerCase()\n    );\n\n    const hasDuplicatesNumber = contactsRed.some(\n     \n      ({ number }) => number === contacts.number\n    );\n   if (hasDuplicatesName) {\n      alert(`${contacts.name} is already in contacts`);\n      return;\n    } else if (hasDuplicatesNumber) {\n      alert(`${contacts.number} is already in contacts`);\n      return;\n    }\n\n    const finalContact = {\n      id: nanoid(),\n      name: contacts.name.charAt(0).toUpperCase() + contacts.name.slice(1),\n      number: String(contacts.number),\n    };\n    await dispatch(addContactThunk(finalContact));\n    dispatch(fetchContactsList());\n  };\n\n  const handleSubmitForm = e => {\n    e.preventDefault();\n    const number = e.currentTarget.elements.number.value;\n    const name = e.currentTarget.elements.name.value;\n\n    const contacts = {\n      name: String(name),\n      number: String(number),\n    };\n\n    handleAddContact(contacts);\n\n    e.currentTarget.reset();\n  };\n\n  return (\n    <form className={css.form} onSubmit={handleSubmitForm}>\n      <label className={css.label} htmlFor=\"name\">\n      Enter a name\n      </label>\n      <input\n        className={css.input}\n        type=\"text\"\n        name=\"name\"\n        placeholder=\"Prokopiev Oleksandr\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n      />\n\n      <label className={css.label} htmlFor=\"number\">\n      Enter a number\n      </label>\n      <input\n        className={css.input}\n        type=\"tel\"\n        name=\"number\"\n        placeholder='+38 (066) 930 88-25'\n        pattern=\"\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required\n      />\n      <button className={css.submitBtn} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n};\n\nexport default Phonebook;\n","// Cache implementation based on Erik Rasmussen's `lru-memoize`:\n// https://github.com/erikras/lru-memoize\nvar NOT_FOUND = 'NOT_FOUND';\n\nfunction createSingletonCache(equals) {\n  var entry;\n  return {\n    get: function get(key) {\n      if (entry && equals(entry.key, key)) {\n        return entry.value;\n      }\n\n      return NOT_FOUND;\n    },\n    put: function put(key, value) {\n      entry = {\n        key: key,\n        value: value\n      };\n    },\n    getEntries: function getEntries() {\n      return entry ? [entry] : [];\n    },\n    clear: function clear() {\n      entry = undefined;\n    }\n  };\n}\n\nfunction createLruCache(maxSize, equals) {\n  var entries = [];\n\n  function get(key) {\n    var cacheIndex = entries.findIndex(function (entry) {\n      return equals(key, entry.key);\n    }); // We found a cached entry\n\n    if (cacheIndex > -1) {\n      var entry = entries[cacheIndex]; // Cached entry not at top of cache, move it to the top\n\n      if (cacheIndex > 0) {\n        entries.splice(cacheIndex, 1);\n        entries.unshift(entry);\n      }\n\n      return entry.value;\n    } // No entry found in cache, return sentinel\n\n\n    return NOT_FOUND;\n  }\n\n  function put(key, value) {\n    if (get(key) === NOT_FOUND) {\n      // TODO Is unshift slow?\n      entries.unshift({\n        key: key,\n        value: value\n      });\n\n      if (entries.length > maxSize) {\n        entries.pop();\n      }\n    }\n  }\n\n  function getEntries() {\n    return entries;\n  }\n\n  function clear() {\n    entries = [];\n  }\n\n  return {\n    get: get,\n    put: put,\n    getEntries: getEntries,\n    clear: clear\n  };\n}\n\nexport var defaultEqualityCheck = function defaultEqualityCheck(a, b) {\n  return a === b;\n};\nexport function createCacheKeyComparator(equalityCheck) {\n  return function areArgumentsShallowlyEqual(prev, next) {\n    if (prev === null || next === null || prev.length !== next.length) {\n      return false;\n    } // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.\n\n\n    var length = prev.length;\n\n    for (var i = 0; i < length; i++) {\n      if (!equalityCheck(prev[i], next[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n}\n// defaultMemoize now supports a configurable cache size with LRU behavior,\n// and optional comparison of the result value with existing values\nexport function defaultMemoize(func, equalityCheckOrOptions) {\n  var providedOptions = typeof equalityCheckOrOptions === 'object' ? equalityCheckOrOptions : {\n    equalityCheck: equalityCheckOrOptions\n  };\n  var _providedOptions$equa = providedOptions.equalityCheck,\n      equalityCheck = _providedOptions$equa === void 0 ? defaultEqualityCheck : _providedOptions$equa,\n      _providedOptions$maxS = providedOptions.maxSize,\n      maxSize = _providedOptions$maxS === void 0 ? 1 : _providedOptions$maxS,\n      resultEqualityCheck = providedOptions.resultEqualityCheck;\n  var comparator = createCacheKeyComparator(equalityCheck);\n  var cache = maxSize === 1 ? createSingletonCache(comparator) : createLruCache(maxSize, comparator); // we reference arguments instead of spreading them for performance reasons\n\n  function memoized() {\n    var value = cache.get(arguments);\n\n    if (value === NOT_FOUND) {\n      // @ts-ignore\n      value = func.apply(null, arguments);\n\n      if (resultEqualityCheck) {\n        var entries = cache.getEntries();\n        var matchingEntry = entries.find(function (entry) {\n          return resultEqualityCheck(entry.value, value);\n        });\n\n        if (matchingEntry) {\n          value = matchingEntry.value;\n        }\n      }\n\n      cache.put(arguments, value);\n    }\n\n    return value;\n  }\n\n  memoized.clearCache = function () {\n    return cache.clear();\n  };\n\n  return memoized;\n}","import { defaultMemoize, defaultEqualityCheck } from './defaultMemoize';\nexport { defaultMemoize, defaultEqualityCheck };\n\nfunction getDependencies(funcs) {\n  var dependencies = Array.isArray(funcs[0]) ? funcs[0] : funcs;\n\n  if (!dependencies.every(function (dep) {\n    return typeof dep === 'function';\n  })) {\n    var dependencyTypes = dependencies.map(function (dep) {\n      return typeof dep === 'function' ? \"function \" + (dep.name || 'unnamed') + \"()\" : typeof dep;\n    }).join(', ');\n    throw new Error(\"createSelector expects all input-selectors to be functions, but received the following types: [\" + dependencyTypes + \"]\");\n  }\n\n  return dependencies;\n}\n\nexport function createSelectorCreator(memoize) {\n  for (var _len = arguments.length, memoizeOptionsFromArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    memoizeOptionsFromArgs[_key - 1] = arguments[_key];\n  }\n\n  var createSelector = function createSelector() {\n    for (var _len2 = arguments.length, funcs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      funcs[_key2] = arguments[_key2];\n    }\n\n    var _recomputations = 0;\n\n    var _lastResult; // Due to the intricacies of rest params, we can't do an optional arg after `...funcs`.\n    // So, start by declaring the default value here.\n    // (And yes, the words 'memoize' and 'options' appear too many times in this next sequence.)\n\n\n    var directlyPassedOptions = {\n      memoizeOptions: undefined\n    }; // Normally, the result func or \"output selector\" is the last arg\n\n    var resultFunc = funcs.pop(); // If the result func is actually an _object_, assume it's our options object\n\n    if (typeof resultFunc === 'object') {\n      directlyPassedOptions = resultFunc; // and pop the real result func off\n\n      resultFunc = funcs.pop();\n    }\n\n    if (typeof resultFunc !== 'function') {\n      throw new Error(\"createSelector expects an output function after the inputs, but received: [\" + typeof resultFunc + \"]\");\n    } // Determine which set of options we're using. Prefer options passed directly,\n    // but fall back to options given to createSelectorCreator.\n\n\n    var _directlyPassedOption = directlyPassedOptions,\n        _directlyPassedOption2 = _directlyPassedOption.memoizeOptions,\n        memoizeOptions = _directlyPassedOption2 === void 0 ? memoizeOptionsFromArgs : _directlyPassedOption2; // Simplifying assumption: it's unlikely that the first options arg of the provided memoizer\n    // is an array. In most libs I've looked at, it's an equality function or options object.\n    // Based on that, if `memoizeOptions` _is_ an array, we assume it's a full\n    // user-provided array of options. Otherwise, it must be just the _first_ arg, and so\n    // we wrap it in an array so we can apply it.\n\n    var finalMemoizeOptions = Array.isArray(memoizeOptions) ? memoizeOptions : [memoizeOptions];\n    var dependencies = getDependencies(funcs);\n    var memoizedResultFunc = memoize.apply(void 0, [function recomputationWrapper() {\n      _recomputations++; // apply arguments instead of spreading for performance.\n\n      return resultFunc.apply(null, arguments);\n    }].concat(finalMemoizeOptions)); // If a selector is called with the exact same arguments we don't need to traverse our dependencies again.\n\n    var selector = memoize(function dependenciesChecker() {\n      var params = [];\n      var length = dependencies.length;\n\n      for (var i = 0; i < length; i++) {\n        // apply arguments instead of spreading and mutate a local list of params for performance.\n        // @ts-ignore\n        params.push(dependencies[i].apply(null, arguments));\n      } // apply arguments instead of spreading for performance.\n\n\n      _lastResult = memoizedResultFunc.apply(null, params);\n      return _lastResult;\n    });\n    Object.assign(selector, {\n      resultFunc: resultFunc,\n      memoizedResultFunc: memoizedResultFunc,\n      dependencies: dependencies,\n      lastResult: function lastResult() {\n        return _lastResult;\n      },\n      recomputations: function recomputations() {\n        return _recomputations;\n      },\n      resetRecomputations: function resetRecomputations() {\n        return _recomputations = 0;\n      }\n    });\n    return selector;\n  }; // @ts-ignore\n\n\n  return createSelector;\n}\nexport var createSelector = /* #__PURE__ */createSelectorCreator(defaultMemoize);\n// Manual definition of state and output arguments\nexport var createStructuredSelector = function createStructuredSelector(selectors, selectorCreator) {\n  if (selectorCreator === void 0) {\n    selectorCreator = createSelector;\n  }\n\n  if (typeof selectors !== 'object') {\n    throw new Error('createStructuredSelector expects first argument to be an object ' + (\"where each property is a selector, instead received a \" + typeof selectors));\n  }\n\n  var objectKeys = Object.keys(selectors);\n  var resultSelector = selectorCreator( // @ts-ignore\n  objectKeys.map(function (key) {\n    return selectors[key];\n  }), function () {\n    for (var _len3 = arguments.length, values = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      values[_key3] = arguments[_key3];\n    }\n\n    return values.reduce(function (composition, value, index) {\n      composition[objectKeys[index]] = value;\n      return composition;\n    }, {});\n  });\n  return resultSelector;\n};","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectcontatcs = store => store.contactsStore.contacts;\n\nexport const selectfilter = store => store.filtersStore.filter;\n\nexport const selectLoading = store => store.contactsStore.isLoading;\n\nexport const selectErrore = store => store.contactsStore.isError;\n\nexport const selectContactsForId = store => store.contactsStore.contactsForId;\n\n\n\n\nexport const selectFilteredContacts = createSelector(\n  [selectfilter, selectcontatcs],\n  (filter, contatcs) =>\n    contatcs.filter((({name,number}) =>\n    name.toLowerCase().includes(filter.toLowerCase().trim()) ||\n    number.toString().includes(filter.toLowerCase().trim())\n  )\n    )\n);\n"],"names":["nanoid","size","arguments","length","undefined","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","contactsRed","useSelector","selectcontatcs","dispatch","useDispatch","handleAddContact","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","contacts","hasDuplicatesName","hasDuplicatesNumber","finalContact","_context","prev","next","some","_ref2","name","toLowerCase","_ref3","number","alert","concat","abrupt","charAt","slice","String","addContactThunk","fetchContactsList","stop","_x","apply","_jsxs","className","css","onSubmit","e","preventDefault","currentTarget","elements","value","reset","children","_jsx","htmlFor","type","placeholder","pattern","title","required","NOT_FOUND","defaultEqualityCheck","a","b","defaultMemoize","func","equalityCheckOrOptions","providedOptions","equalityCheck","_providedOptions$equa","_providedOptions$maxS","maxSize","resultEqualityCheck","comparator","i","createCacheKeyComparator","cache","equals","entry","get","key","put","getEntries","clear","createSingletonCache","entries","cacheIndex","findIndex","splice","unshift","pop","createLruCache","memoized","matchingEntry","find","clearCache","getDependencies","funcs","dependencies","Array","isArray","every","dep","dependencyTypes","map","join","Error","createSelectorCreator","memoize","_len","memoizeOptionsFromArgs","_key","createSelector","_len2","_key2","_lastResult","_recomputations","directlyPassedOptions","memoizeOptions","resultFunc","_directlyPassedOption","_directlyPassedOption2","finalMemoizeOptions","memoizedResultFunc","selector","params","push","Object","assign","lastResult","recomputations","resetRecomputations","store","contactsStore","selectLoading","isLoading","selectErrore","isError","selectFilteredContacts","filtersStore","filter","contatcs","includes","trim"],"sourceRoot":""}